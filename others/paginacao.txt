
@GetMapping
public Page<TopicoDto> lista(@RequestParam(required = false) String nomeCurso,
		@RequestParam int pagina, @RequestParam int qtd, @RequestParam String ordenacao) {
	
	Pageable paginacao = PageRequest.of(pagina, qtd, Direction.ASC, ordenacao);
	
	if (nomeCurso == null) {
		Page<Topico> topicos = topicoRepository.findAll(paginacao);
		return TopicoDto.converter(topicos);
	} else {
		Page<Topico> topicos = topicoRepository.findByCursoNome(nomeCurso, paginacao);
		return TopicoDto.converter(topicos);
	}
}

localhost:8080/topicos?pagina=0&qtd=3&ordenacao=id

-----------------------------------------------------

@EnableSpringDataWebSupport //anotação no main

@GetMapping
public Page<TopicoDto> lista(@RequestParam(required = false) String nomeCurso,
		@PageableDefault(sort = "id", direction = Direction.ASC, page = 0, size = 10) Pageable paginacao) {
	
	if (nomeCurso == null) {
		Page<Topico> topicos = topicoRepository.findAll(paginacao);
		return TopicoDto.converter(topicos);
	} else {
		Page<Topico> topicos = topicoRepository.findByCursoNome(nomeCurso, paginacao);
		return TopicoDto.converter(topicos);
	}
}

localhost:8080/topicos?page=0&size=10&sort=id,asc&sort=dataCriacao,desc

------------------------------------------------------