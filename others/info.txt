Para criar um projeto com Spring Boot, utilizamos o Spring Initialzr, através do site https://start.spring.io

Para inicializar o projeto com Spring Boot, devemos utilizar a classe com o método main.

Para criar um controller rest, utilizamos as anotações @RestController e @RequestMapping.

---------------------------------

Para um método no controller não encaminhar a requisição a uma página JSP, ou Thymeleaf, devemos utilizar a anotação @ResponseBody.

O Spring, por padrão, converte os dados no formato JSON, utilizando a biblioteca Jackson.

Para não repetir a anotação @ResponseBody em todos os métodos do controller, devemos utilizar a anotação @RestController.

Para não precisar reiniciar manualmente o servidor a cada alteração feita no código, basta utilizar o módulo Spring Boot DevTools.

Não é uma boa prática retornar entidades JPA nos métodos dos controllers, sendo mais indicado retornar classes que seguem o padrão DTO (Data Transfer Object).

Os principais conceitos sobre o modelo arquitetural REST: recursos, URIs, verbos HTTP, Representações e comunicação stateless.

-----------------------------------

Para utilizar o JPA no projeto, devemos incluir o módulo Spring Boot Data JPA, que utiliza o Hibernate, por padrão, como sua implementação.

Para configurar o banco de dados da aplicação, devemos adicionar as propriedades do datasource e do JPA no arquivo src/main/resources/application.properties

Para acessar a página de gerenciamento do banco de dados H2, devemos configurar o console do H2 com propriedades no arquivo src/main/resources/application.properties

Para mapear as classes de domínio da aplicação como entidade JPA, devemos utilizar as anotações @Entity, @Id, @GeneratedValue, @ManyToOne, @OneToMany e @Enumerated

Para que o Spring Boot popule automaticamente o banco de dados da aplicação, devemos criar o arquivo src/main/resources/data.sql

Para criar um Repository, devemos criar uma interface, que herda da interface JPARepository do Spring Data JPA.

Para criar consultas que filtram por atributos da entidade, devemos seguir o padrão de nomenclatura de métodos do Spring, como por exemplo findByCursoNome.

Para criar manualmente a consulta com JPQL, devemos utilizar a anotação @Query.

-------------------------------------

Para evitar repetir a URL em todos os métodos, devemos utilizar a anotação @RequestMapping em cima da classe controller.

Para mapear requisições do tipo POST, devemos utilizar a anotação @PostMapping.

Para receber dados enviados no corpo da requisição, a boa prática é criar uma classe que também siga o padrão DTO (Data Transfer Object).

A boa prática para métodos que cadastram informações é devolver o código HTTP 201, ao invés do código 200.

Para montar uma resposta a ser devolvida ao cliente da API, devemos utilizar a classe ResponseEntity do Spring.

Para testar requisições do tipo POST, precisamos utilizar alguma ferramenta de testes de API Rest.

Utilizar o Postman para testar uma API Rest.

--------------------------------------

Para fazer validações das informações enviadas pelos clientes da API, podemos utilizar a especificação Bean Validation, com as anotações @NotNull, @NotEmpty, @Size, dentre outras.

Para o Spring disparar as validações do Bean Validation e devolver um erro 400, caso alguma informação enviada pelo cliente esteja inválida, devemos utilizar a anotação @Valid.

Para interceptar as exceptions que forem lançadas nos métodos das classes controller, devemos criar uma classe anotada com @RestControllerAdvice.

Para tratar os erros de validação do Bean Validation e personalizar o JSON, que será devolvido ao cliente da API, com as mensagens de erro, devemos criar um método na classe @RestControllerAdvice e anotá-lo com @ExceptionHandler e @ResponseStatus.

---------------------------------------

Para receber parâmetros dinâmicos no path da URL, devemos utilizar a anotação @PathVariable.

Para mapear requisições do tipo PUT, devemos utilizar a anotação @PutMapping.

Para fazer o controle transacional automático, devemos utilizar a anotação @Transactional nos métodos do controller.

Para mapear requisições do tipo DELETE, devemos utilizar a anotação @DeleteMapping.

Para tratar o erro 404 na classe controller, devemos utilizar o método findById, ao invés do método getOne, e utilizar a classe ResponseEntity para montar a resposta de not found.

O método getOne lança uma exception quando o id passado como parâmetro não existir no banco de dados.

O método findById retorna um objeto Optional<>, que pode ou não conter um objeto.

----------------------------------------

Para realizar paginação com Spring Data JPA, devemos utilizar a interface Pageable.

Nas classes Repository, os métodos que recebem um pageable como parâmetro retornam objetos do tipo Page<>, ao invés de List<>.

Para o Spring incluir informações sobre a paginação no JSON de resposta enviado ao cliente da API, devemos alterar o retorno do método do controller de List<> para Page<>.

Para fazer a ordenação na consulta ao banco de dados, devemos utilizar também a interface Pageable, passando como parâmetro a direção da ordenação, utilizando a classe Direction, e o nome do atributo para ordenar.

Para receber os parâmetros de ordenação e paginação diretamente nos métodos do controller, devemos habilitar o módulo SpringDataWebSupport, adicionando a anotação @EnableSpringDataWebSupport na classe ForumApplication.

-----------------------------------------

Para utilizar o módulo de cache do Spring Boot, devemos adicioná-lo como dependência do projeto no arquivo pom.xml.

Para habilitar o uso de caches na aplicação, devemos adicionar a anotação @EnableCaching na classe ForumApplication.

Para que o Spring guarde o retorno de um método no cache, devemos anotá-lo com @Cacheable.

Para o Spring invalidar algum cache após um determinado método ser chamado, devemos anotá-lo com @CacheEvict.

Devemos utilizar cache apenas para as informações que nunca ou raramente são atualizadas no banco de dados.

-----------------------------------------

Para utilizar o módulo do Spring Security, devemos adicioná-lo como dependência do projeto no arquivo pom.xml.

Para habilitar e configurar o controle de autenticação e autorização do projeto, devemos criar uma classe e anotá-la com @Configuration e @EnableWebSecurity.

Para liberar acesso a algum endpoint da nossa API, devemos chamar o método http.authorizeRequests().antMatchers().permitAll() dentro do método configure(HttpSecurity http), que está na classe SecurityConfigurations.

O método anyRequest().authenticated() indica ao Spring Security para bloquear todos os endpoints que não foram liberados anteriormente com o método permitAll().

Para implementar o controle de autenticação na API, devemos implementar a interface UserDetails na classe Usuario e também implementar a interface GrantedAuthority na classe Perfil.

Para o Spring Security gerar automaticamente um formulário de login, devemos chamar o método and().formLogin(), dentro do método configure(HttpSecurity http), que está na classe SecurityConfigurations.

A lógica de autenticação, que consulta o usuário no banco de dados, deve implementar a interface UserDetailsService.

Devemos indicar ao Spring Security qual o algoritmo de hashing de senha que utilizaremos na API, chamando o método passwordEncoder(), dentro do método configure(AuthenticationManagerBuilder auth), que está na classe SecurityConfigurations.

----------------------------------------

Em uma API Rest, não é uma boa prática utilizar autenticação com o uso de session.

Uma das maneiras de fazer autenticação stateless é utilizando tokens JWT (Json Web Token).

Para utilizar JWT na API, devemos adicionar a dependência da biblioteca jjwt no arquivo pom.xml do projeto.

Para configurar a autenticação stateless no Spring Security, devemos utilizar o método sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).

Para disparar manualmente o processo de autenticação no Spring Security, devemos utilizar a classe AuthenticationManager.

Para poder injetar o AuthenticationManager no controller, devemos criar um método anotado com @Bean, na classe SecurityConfigurations, que retorna uma chamada ao método super.authenticationManager().

Para criar o token JWT, devemos utilizar a classe Jwts.

O token tem um período de expiração, que pode ser definida no arquivo application.properties.

Para injetar uma propriedade do arquivo application.properties, devemos utilizar a anotação @Value.

-----------------------------------------

Para enviar o token JWT na requisição, é necessário adicionar o cabeçalho Authorization, passando como valor Bearer token.

Para criar um filtro no Spring, devemos criar uma classe que herda da classe OncePerRequestFilter.

Para recuperar o token JWT da requisição no filter, devemos chamar o método request.getHeader("Authorization").

Para habilitar o filtro no Spring Security, devemos chamar o método and().addFilterBefore(new AutenticacaoViaTokenFilter(), UsernamePasswordAuthenticationFilter.class).

Para indicar ao Spring Security que o cliente está autenticado, devemos utilizar a classe SecurityContextHolder, chamando o método SecurityContextHolder.getContext().setAuthentication(authentication).

-------------------------------------------

Para adicionar o Spring Boot Actuator no projeto, devemos adicioná-lo como uma dependência no arquivo pom.xml.

Para acessar as informações disponibilizadas pelo Actuator, devemos entrar no endereço http://localhost:8080/actuator.

Para liberar acesso ao Actuator no Spring Security, devemos chamar o método .antMatchers(HttpMethod.GET, "/actuator/**").

Para que o Actuator exponha mais informações sobre a API, devemos adicionar as propriedades management.endpoint.health.show-details=always e management.endpoints.web.exposure.include=* no arquivo application.properties.

Para utilizar o Spring Boot Admin, devemos criar um projeto Spring Boot e adicionar nele os módulos spring-boot-starter-web e spring-boot-admin-server.

Para trocar a porta na qual o servidor do Spring Boot Admin rodará, devemos adicionar a propriedade server.port=8081 no arquivo application.properties.

Para o Spring Boot Admin conseguir monitorar a nossa API, devemos adicionar no projeto da API o módulo spring-boot-admin-client e também adicionar a propriedade spring.boot.admin.client.url=http://localhost:8081 no arquivo application.properties.

Para acessar a interface gráfica do Spring Boot Admin, devemos entrar no endereço http://localhost:8081.

---------------------------------------------

Para documentar a nossa API Rest, podemos utilizar o Swagger, com o módulo SpringFox Swagger.

Para utilizar o SpringFox Swagger na API, devemos adicionar suas dependências no arquivo pom.xml.

Para habilitar o Swagger na API, devemos adicionar a anotação @EnableSwagger2 na classe ForumApplication.

As configurações do Swagger devem ser feitas criando-se uma classe chamada SwaggerConfigurations e adicionando nela a anotação @Configuration.

Para configurar quais endpoints e pacotes da API o Swagger deve gerar a documentação, devemos criar um método anotado com @Bean, que devolve um objeto do tipo Docket.

Para acessar a documentação da API, devemos entrar no endereço http://localhost:8080/swagger-ui.html.

Para liberar acesso ao Swagger no Spring Security, devemos chamar o seguinte método web.ignoring().antMatchers("/**.html", "/v2/api-docs", "/webjars/**", "/configuration/**", "/swagger-resources/**"), dentro do método void configure(WebSecurity web), que está na classe SecurityConfigurations.

----------------------------------------------

Para atualizar a versão do Spring Boot na aplicação, basta alterar a tag <version> da tag <parent>, no arquivo pom.xml.

É importante ler as release notes das novas versões do Spring Boot, para identificar possíveis quebras de compatibilidades ao atualizar a aplicação.

É possível restringir o acesso a determinados endpoints da aplicação, de acordo com o perfil do usuário autenticado, utilizando o método hasRole(“NOME_DO_ROLE”) nas configurações de segurança da aplicação.

----------------------------------------------

Profiles

Profiles devem ser utilizados para separar as configurações de cada tipo de ambiente, tais como desenvolvimento, testes e produção.

A anotação @Profile serve para indicar ao Spring que determinada classe deve ser carregada apenas quando determinados profiles estiverem ativos.

É possível alterar o profile ativo da aplicação por meio do parâmetro -Dspring.profiles.active.
Ativar desse modo: botão direito no projeto, Run As, Run Configurations, Java Application, ForumApplication, aba Arguments, campo VM Arguments,
-Dspring.profiles.active=dev

Ao não definir um profile para a aplicação, o Spring considera que o profile ativo dela e o profile de nome default.

------------------------------------------------

Testes

É possível escrever testes automatizados de classes que são beans do Spring, como Controllers e Repositories.

É possível utilizar injeção de dependências nas classes de testes automatizados.

A anotação @SpringBootTest deve ser utilizada nas classes de testes automatizados para que o Spring inicialize o servidor e disponibilize os beans da aplicação.

Ao testar uma interface Repository devemos, preferencialmente, utilizar a anotação @DataJpaTest.

Por padrão, os testes automatizados dos repositories utilizam um banco de dados em memória, como o h2.

É possível utilizar outro banco de dados para os testes automatizados, utilizando a anotação @AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE).

É possível forçar um profile específico para os testes automatizados com a utilização da anotação @ActiveProfiles.

Para conseguir injetar o MockMvc devemos anotar a classe de teste com @AutoConfigureMockMvc.

-------------------------------------------------

Deploy

Gerar jar pelo Eclipse

aplicação spring-boot por padrão gera .jar

botão direito do mouse no projeto, Run As, Maven install

ou 

botão direito do mouse no projeto, Run As, Maven build...
em Goals colocar clean package

ou

pelo prompt de comandos indo até o diretório do projeto
rodar o comando
mvn clean package

gera o jar -> forum-0.0.1-SNAPSHOT.jar

para rodar -> java -jar forum-0.0.1-SNAPSHOT.jar

------------------------------------------------------

Externalizando senhas com variáveis de ambiente

Exemplo, no application-prod.properties

spring.datasource.url=${FORUM_DATABASE_URL}
spring.datasource.username=${FORUM_DATABASE_USERNAME}
spring.datasource.password=${FORUM_DATABASE_PASSWORD}

forum.jwt.secret=${FORUM_JWT_SECRET}

para rodar -> java -jar -Dspring.profiles.active=prod forum.jar

Para preencher as variáveis:

Maneira 1: exportar variável de ambiente na máquina
exemplo linux/mack
export FORUM_DATABASE_URL=jdbc:h2:mem:alura-forum-prod
demais variaveis...

Maneira 2: rodar no próprio comando
java -jar -Dspring.profiles.active=prod 
-DFORUM_DATABASE_URL=jdbc:h2:mem:alura-forum 
-DFORUM_DATABASE_USERNAME=sa 
-DFORUM_DATABASE_PASSWORD=
-DFORUM_JWT_SECRET=123456 
forum.jar

java -jar -Dspring.profiles.active=prod -DFORUM_DATABASE_URL=jdbc:h2:mem:alura-forum -DFORUM_DATABASE_USERNAME=sa -DFORUM_DATABASE_PASSWORD= -DFORUM_JWT_SECRET=123456 forum.jar
-----------------------------------------------------

Retirando o -0.0.1-SNAPSHOT do nome do jar

no pom.xml, acrescentar a tag

<build>
		<finalName>forum</finalName>
		....
</build>

------------------------------------------------------

Deploy tradicional com arquivo war

No pom.xml

Depois de <description>Forum da Alura</description>
colocar a tag
<packaging>war</packaging>

Em <dependencies>
Adicionar
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-tomcat</artifactId>
	<scope>provided</scope>
</dependency>

Na classe main ForumApplication.java

public class ForumApplication extends SpringBootServletInitializer {

	public static void main(String[] args) {
		SpringApplication.run(ForumApplication.class, args);
	}
	
	@Override
	protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
		return builder.sources(ForumApplication.class);
	}

}

------------------------------------------------------

Resumo Build/Deploy

O build da aplicação é realizado via maven, com o comando mvn clean package.

Ao realizar o build, por padrão será criado um arquivo .jar.

É possível passar parâmetros para as configurações da aplicação via variáveis de ambiente.

É possível alterar o build para criar um arquivo .war, para deploy em servidores de aplicações.

-------------------------------------------------------

Gerando imagem Docker da aplicação

Na raiz do projeto, criar o arquivo Dockerfile

FROM openjdk:8-jdk-alpine									# imagem base a ser utilizada
RUN addgroup -S spring && adduser -S spring -G spring		# criar usuário neste S.O. ao invés de usar usuário root
USER spring:spring											# usar usuário criado no passo anterior
ARG JAR_FILE=target/*.jar									# pega o jar gerado pelo build do maven e coloca o nome desse arquivo na variavel
COPY ${JAR_FILE} app.jar									# copia o jar para o S.O com o nome app.jar
ENTRYPOINT ["java","-jar","/app.jar"]						# comando a ser executado

Estando na raiz do projeto, comando para o Docker criar a imagem

docker build -t williammian/forum .

-t é para nomear a imagem

 . (espaço ponto) é para pegar o diretório raiz, atual
 

Para listar as imagens
docker image list

----------------------------------------------------------

Rodando a aplicação via Docker

docker run williammian/forum

Passando variáveis de ambiente

docker run -p 8080:8080 -e SPRING_PROFILES_ACTIVE='prod' -e FORUM_DATABASE_URL='jdbc:h2:mem:alura-forum-prod' -e FORUM_DATABASE_USERNAME='sa' -e FORUM_DATABASE_PASSWORD='' -e FORUM_JWT_SECRET='123456' williammian/forum

-p 8080:8080 para rodar na porta 8080 do container e expor na máquina/host na porta 8080

-e para passar variáveis de ambiente (parâmetros) para o Docker

-----------------------------------------------------------

 
