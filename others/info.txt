Para criar um projeto com Spring Boot, utilizamos o Spring Initialzr, através do site https://start.spring.io

Para inicializar o projeto com Spring Boot, devemos utilizar a classe com o método main.

Para criar um controller rest, utilizamos as anotações @RestController e @RequestMapping.

---------------------------------

Para um método no controller não encaminhar a requisição a uma página JSP, ou Thymeleaf, devemos utilizar a anotação @ResponseBody.

O Spring, por padrão, converte os dados no formato JSON, utilizando a biblioteca Jackson.

Para não repetir a anotação @ResponseBody em todos os métodos do controller, devemos utilizar a anotação @RestController.

Para não precisar reiniciar manualmente o servidor a cada alteração feita no código, basta utilizar o módulo Spring Boot DevTools.

Não é uma boa prática retornar entidades JPA nos métodos dos controllers, sendo mais indicado retornar classes que seguem o padrão DTO (Data Transfer Object).

Os principais conceitos sobre o modelo arquitetural REST: recursos, URIs, verbos HTTP, Representações e comunicação stateless.

-----------------------------------

Para utilizar o JPA no projeto, devemos incluir o módulo Spring Boot Data JPA, que utiliza o Hibernate, por padrão, como sua implementação.

Para configurar o banco de dados da aplicação, devemos adicionar as propriedades do datasource e do JPA no arquivo src/main/resources/application.properties

Para acessar a página de gerenciamento do banco de dados H2, devemos configurar o console do H2 com propriedades no arquivo src/main/resources/application.properties

Para mapear as classes de domínio da aplicação como entidade JPA, devemos utilizar as anotações @Entity, @Id, @GeneratedValue, @ManyToOne, @OneToMany e @Enumerated

Para que o Spring Boot popule automaticamente o banco de dados da aplicação, devemos criar o arquivo src/main/resources/data.sql

Para criar um Repository, devemos criar uma interface, que herda da interface JPARepository do Spring Data JPA.

Para criar consultas que filtram por atributos da entidade, devemos seguir o padrão de nomenclatura de métodos do Spring, como por exemplo findByCursoNome.

Para criar manualmente a consulta com JPQL, devemos utilizar a anotação @Query.

-------------------------------------

Para evitar repetir a URL em todos os métodos, devemos utilizar a anotação @RequestMapping em cima da classe controller.

Para mapear requisições do tipo POST, devemos utilizar a anotação @PostMapping.

Para receber dados enviados no corpo da requisição, a boa prática é criar uma classe que também siga o padrão DTO (Data Transfer Object).

A boa prática para métodos que cadastram informações é devolver o código HTTP 201, ao invés do código 200.

Para montar uma resposta a ser devolvida ao cliente da API, devemos utilizar a classe ResponseEntity do Spring.

Para testar requisições do tipo POST, precisamos utilizar alguma ferramenta de testes de API Rest.

Utilizar o Postman para testar uma API Rest.

--------------------------------------

Para fazer validações das informações enviadas pelos clientes da API, podemos utilizar a especificação Bean Validation, com as anotações @NotNull, @NotEmpty, @Size, dentre outras.

Para o Spring disparar as validações do Bean Validation e devolver um erro 400, caso alguma informação enviada pelo cliente esteja inválida, devemos utilizar a anotação @Valid.

Para interceptar as exceptions que forem lançadas nos métodos das classes controller, devemos criar uma classe anotada com @RestControllerAdvice.

Para tratar os erros de validação do Bean Validation e personalizar o JSON, que será devolvido ao cliente da API, com as mensagens de erro, devemos criar um método na classe @RestControllerAdvice e anotá-lo com @ExceptionHandler e @ResponseStatus.

---------------------------------------

Para receber parâmetros dinâmicos no path da URL, devemos utilizar a anotação @PathVariable.

Para mapear requisições do tipo PUT, devemos utilizar a anotação @PutMapping.

Para fazer o controle transacional automático, devemos utilizar a anotação @Transactional nos métodos do controller.

Para mapear requisições do tipo DELETE, devemos utilizar a anotação @DeleteMapping.

Para tratar o erro 404 na classe controller, devemos utilizar o método findById, ao invés do método getOne, e utilizar a classe ResponseEntity para montar a resposta de not found.

O método getOne lança uma exception quando o id passado como parâmetro não existir no banco de dados.

O método findById retorna um objeto Optional<>, que pode ou não conter um objeto.

----------------------------------------

Para realizar paginação com Spring Data JPA, devemos utilizar a interface Pageable.

Nas classes Repository, os métodos que recebem um pageable como parâmetro retornam objetos do tipo Page<>, ao invés de List<>.

Para o Spring incluir informações sobre a paginação no JSON de resposta enviado ao cliente da API, devemos alterar o retorno do método do controller de List<> para Page<>.

Para fazer a ordenação na consulta ao banco de dados, devemos utilizar também a interface Pageable, passando como parâmetro a direção da ordenação, utilizando a classe Direction, e o nome do atributo para ordenar.

Para receber os parâmetros de ordenação e paginação diretamente nos métodos do controller, devemos habilitar o módulo SpringDataWebSupport, adicionando a anotação @EnableSpringDataWebSupport na classe ForumApplication.

-----------------------------------------

Para utilizar o módulo de cache do Spring Boot, devemos adicioná-lo como dependência do projeto no arquivo pom.xml.

Para habilitar o uso de caches na aplicação, devemos adicionar a anotação @EnableCaching na classe ForumApplication.

Para que o Spring guarde o retorno de um método no cache, devemos anotá-lo com @Cacheable.

Para o Spring invalidar algum cache após um determinado método ser chamado, devemos anotá-lo com @CacheEvict.

Devemos utilizar cache apenas para as informações que nunca ou raramente são atualizadas no banco de dados.

-----------------------------------------

Para utilizar o módulo do Spring Security, devemos adicioná-lo como dependência do projeto no arquivo pom.xml.

Para habilitar e configurar o controle de autenticação e autorização do projeto, devemos criar uma classe e anotá-la com @Configuration e @EnableWebSecurity.

Para liberar acesso a algum endpoint da nossa API, devemos chamar o método http.authorizeRequests().antMatchers().permitAll() dentro do método configure(HttpSecurity http), que está na classe SecurityConfigurations.

O método anyRequest().authenticated() indica ao Spring Security para bloquear todos os endpoints que não foram liberados anteriormente com o método permitAll().

Para implementar o controle de autenticação na API, devemos implementar a interface UserDetails na classe Usuario e também implementar a interface GrantedAuthority na classe Perfil.

Para o Spring Security gerar automaticamente um formulário de login, devemos chamar o método and().formLogin(), dentro do método configure(HttpSecurity http), que está na classe SecurityConfigurations.

A lógica de autenticação, que consulta o usuário no banco de dados, deve implementar a interface UserDetailsService.

Devemos indicar ao Spring Security qual o algoritmo de hashing de senha que utilizaremos na API, chamando o método passwordEncoder(), dentro do método configure(AuthenticationManagerBuilder auth), que está na classe SecurityConfigurations.

----------------------------------------

Em uma API Rest, não é uma boa prática utilizar autenticação com o uso de session.

Uma das maneiras de fazer autenticação stateless é utilizando tokens JWT (Json Web Token).

Para utilizar JWT na API, devemos adicionar a dependência da biblioteca jjwt no arquivo pom.xml do projeto.

Para configurar a autenticação stateless no Spring Security, devemos utilizar o método sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).

Para disparar manualmente o processo de autenticação no Spring Security, devemos utilizar a classe AuthenticationManager.

Para poder injetar o AuthenticationManager no controller, devemos criar um método anotado com @Bean, na classe SecurityConfigurations, que retorna uma chamada ao método super.authenticationManager().

Para criar o token JWT, devemos utilizar a classe Jwts.

O token tem um período de expiração, que pode ser definida no arquivo application.properties.

Para injetar uma propriedade do arquivo application.properties, devemos utilizar a anotação @Value.

-----------------------------------------

Para enviar o token JWT na requisição, é necessário adicionar o cabeçalho Authorization, passando como valor Bearer token.

Para criar um filtro no Spring, devemos criar uma classe que herda da classe OncePerRequestFilter.

Para recuperar o token JWT da requisição no filter, devemos chamar o método request.getHeader("Authorization").

Para habilitar o filtro no Spring Security, devemos chamar o método and().addFilterBefore(new AutenticacaoViaTokenFilter(), UsernamePasswordAuthenticationFilter.class).

Para indicar ao Spring Security que o cliente está autenticado, devemos utilizar a classe SecurityContextHolder, chamando o método SecurityContextHolder.getContext().setAuthentication(authentication).

-------------------------------------------
